Host Wagtail on a VPS
=====================

Create the Virtual Server
--------------------------

Start by creating a VPS on your platform of choice we've current tested 
on `Linode`_,  `Digital Ocean`_ but we expect the underlying Ansible Playbooks  
to work on other platforms.  Your favorite vendor will typically allow you to select
size, server location and the Linux Distribution of the VPS instance.  At this
point in time we only support Ubuntu Linux (14.04 and 16.04) but  we
believe that the underlying Ansible Playbooks can easily be modified to
accommodate other Linux distributions. If you do so, please consider sending us
a Pull Request. 

The underlying Ansible playbooks rely on SSH public key authentication.
So that once you've created the VPS you must add your SSH public key to the 
Root users ``authorized_keys`` file (found in ``/root/.ssh/authorized_keys``).  
Note, some services like DigitalOcean allow you the upload your SSH public keys to your account so that
it will be automaically added when you create a new Droplet. You must also
ensure that your DNS zone has been correctly configured so that an A record
maps the name of the production or staging sever to the IP address the VPS. 

.. _Digital Ocean: https://www.digitalocean.com/
.. _Linode: https://linode.com/

Once you have created the VPS and configured the DNS provisioning and
deployment can be accomplished with three commands.  

Run Optional Pre Task
----------------------
In some cases, the Ubuntu version provided by the VPS vendor (for example
DigitalOcean)  lacks the components (Python and Simple Json) to run Ansible
server side. In this case run the following command::

    make pre_task 
    

Creating a Deployment User
--------------------------

.. raw:: html

    <div>
       <iframe width="640" height="360" src="https://www.youtube.com/embed/mSffkWuCkgQ?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>
    </div>
    
Next we want to create a deployment user. To create the deployment user for the production ::

    make deploy_user
    
The Playbook will pause to prompt you to add your public keys (for e.g.
``id_rsa.pub``) to the ``ansible/{{cookiecutter.project_slug}}_keystore/``
folder.  In addition, to creating the deployment user, this command will also
download the public key for the deployment user created on the server to the
keystore directory. Use this key as a deployment key on sites like GitHub_ or
BitBucket_

.. _GitHub: https://github.com/
.. _BitBucket: https://bitbucket.org/


Provisioning the VPS and Deploying your Site
------------------------------------------------

Start by examining the ``env.example`` file. This has been generated by
a cookiecutter `Post Generate Hook`_. The file, which is is designed to work
with the `Django Environ`_ App, contains the values for several important
Django Settings such as ``DJANGO_SECRET_KEY`` and database password
(found in ``PROD_DATABASE_URL``). The values for these settings have be 
generated using code was adopted from Django's standard crypto functions and utilities.
However, it is probably better to choose to use your own values for these
setting just to be on the safe side.  Additionally, you may wish to add the values
for other settings such as ``EMAIL_HOST``, ``EMAIL_PASSWORD``, ``OP_BEAT`` keys etc. 
Please note that you can add these values after you have provisioned the 
server and deployed the site. You should also take a look at the
``ansible/{{cookiecutter.production_host_name}}.yml`` paying
particular attention to:

 - DJANGO_ADMIN_USER
 - DJANGO_ADMIN_EMAIL 
 - DJANGO_ADMIN_PASSWD'

Please note that if you have not added email settings in ``env.production``,
you will not be able to reset the Django Admin password via email. 

Once you are happy with your settings, copy them to
``ansible/{{cookiecutter.project_slug}}_keystore/`` folder and rename the file
to ``env.production``.  Then run ::

    make provision

This will:

* Install all the required Linux packages and libraries on the server.
* Setup basic security on the using UFW Firewall and fail2ban.
* Install and configure PostgresSQL.
* Install and configure Nginx for SSL serving using Letsencrypt
* Install and configure Redis and ElasticSearch.
* Clone the projectâ€™s VCS repository, setup a virtual environment and install all Python dependencies
* Setup Gunicorn and Supervisor
* Configure and install a Celery worker process

Once the the playbook in done, you can check out your site at https://production_host_name. The Admin back-end is available at http://production_host_name/admin/.  The Django SuperUser name and password are to be found in your project's `ansible/host_vars/production_host_name`: 

.. _Post Generate Hook: http://cookiecutter.readthedocs.io/en/latest/advanced/hooks.html 
.. _Django Environ: https://django-environ.readthedocs.io/en/latest/ 

